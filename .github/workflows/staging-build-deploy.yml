name: Build and deploy app (staging)

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: false

on:
  workflow_dispatch: # on button click
    inputs:
      skip_build:
        description: 'Skip build?'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - deployments/staging/makerdao

env:
  APP_NAME: connect
  CLUSTER_NAME: ${{ secrets.STAGING_CLUSTER_NAME }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.STAGING_AWS_REGION }}.amazonaws.com
  ENV: staging
  HELM_VALUES: deploy/values.yml
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }} # The base domain to use for the k8s endpoints
  SKIP_BUILD: ${{ ( contains(github.event.head_commit.message, '[skip build]') || github.event.inputs.skip_build == 'true' ) && 'true' || 'false' }}

jobs:
  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      short_sha: '${{ steps.set_outputs.outputs.short_sha }}'
      skip_build: '${{ steps.set_outputs.outputs.skip_build }}'

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set outputs
        id: set_outputs
        shell: bash
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "skip_build=${{ env.SKIP_BUILD }}" >> $GITHUB_OUTPUT

  build:
    name: Build image
    runs-on: ubuntu-latest
    needs:
      - setup
    if: always() && !cancelled() && !failure() && needs.setup.outputs.skip_build == 'false'
    env:
      ECR_REPO_NAME: connect-staging

    steps:
      - name: Checkout all files
        id: checkout
        uses: actions/checkout@v4

      - name: Build, tag, and push image to ECR
        id: build_image
        uses: ./.github/actions/build
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.STAGING_AWS_REGION }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          SHA_TAG: ${{ needs.setup.outputs.short_sha }}

  deploy:
    name: Deploy image
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    if: always() && !cancelled() && !failure() && !contains(github.event.head_commit.message , '[skip deploy]')
    env:
      ECR_REPO_NAME: connect-staging

    steps:
      - name: Checkout actions
        id: checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          sparse-checkout: |
            .github

      - name: Deploy image to EKS
        id: deploy_image
        uses: ./.github/actions/deploy
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.STAGING_AWS_REGION }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          APP_NAME: ${{ env.APP_NAME }}
          ENDPOINT: ${{ env.APP_NAME }}-${{ env.ENV }}.${{ env.DOMAIN_NAME }}
          HELM_VALUES: ${{ env.HELM_VALUES }}
          IMAGE_TAG: ${{ ( needs.setup.outputs.skip_build == 'true' ) && 'latest' || needs.setup.outputs.short_sha }} # If the build was skipped, use the `latest` image
          PH_CONNECT_SENTRY_ENV: ${{ vars.STAGING_PH_CONNECT_SENTRY_ENV }}
